// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	phones "github.com/enkhalifapro/phone-validator/phones"
	mock "github.com/stretchr/testify/mock"
)

// PhoneManager is an autogenerated mock type for the PhoneManager type
type PhoneManager struct {
	mock.Mock
}

// GetCountries provides a mock function with given fields:
func (_m *PhoneManager) GetCountries() map[string]phones.Country {
	ret := _m.Called()

	var r0 map[string]phones.Country
	if rf, ok := ret.Get(0).(func() map[string]phones.Country); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]phones.Country)
		}
	}

	return r0
}

// GetPhones provides a mock function with given fields: limit, skip
func (_m *PhoneManager) GetPhones(limit int, skip int) ([]*phones.Phone, error) {
	ret := _m.Called(limit, skip)

	var r0 []*phones.Phone
	if rf, ok := ret.Get(0).(func(int, int) []*phones.Phone); ok {
		r0 = rf(limit, skip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*phones.Phone)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, skip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPhonesByCountry provides a mock function with given fields: limit, skip, countryName
func (_m *PhoneManager) GetPhonesByCountry(limit int, skip int, countryName string) ([]*phones.Phone, error) {
	ret := _m.Called(limit, skip, countryName)

	var r0 []*phones.Phone
	if rf, ok := ret.Get(0).(func(int, int, string) []*phones.Phone); ok {
		r0 = rf(limit, skip, countryName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*phones.Phone)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(limit, skip, countryName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
